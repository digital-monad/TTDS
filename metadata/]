import pickle, argparse, sys
import pandas as pd
from preprocess import preprocessSongLyrics
from preprocess import preprocessSongLyricsMetadata
import bson

class Indexer:

    def __init__(self, csv_file, stopping = False, line_id = 0):
        self.index = {}
        self.song_metadata = {}
        self.line_metadata = {}
        self.artist = csv_file.split("/")[-1][:-4]
        self.stopping = stopping
        self.current_line_id = 0
        self.lyrics = pd.read_csv(csv_file)

    def pickle(self, file_name):
        with open("./"+file_name + "_index.bson", 'wb') as handle:
            bson.dumps([{**{"_id" : id}, **self.index[id]} for id in self.index], handle)
        with open("./"+file_name + "_song_metadata.bson", 'wb') as handle:
            bson.dumps([{**{"_id" : id}, **self.song_metadata[id]} for id in self.song_metadata], handle)
        with open("./"+file_name + "_line_metadata.bson", 'wb') as handle:
            bson.dumps([{**{"_id" : id}, **self.line_metadata[id]} for id in self.line_metadata], handle)
        # Clear memory
        self.index = {}
        self.song_metadata = {}
        self.line_metadata = {}

    def processSong(self, song_id, artist, title, album, year, date, url, description, lyrics):
        print(f"Processing song {title}")
        preprocessed_lyrics = preprocessSongLyrics(lyrics)
        preprocessed_lyrics_metadata = preprocessSongLyricsMetadata(lyrics)
        # Update song metadata
        song_id = str(song_id)
        self.song_metadata[song_id] = {
            "title" : title,
            "artist" : artist,
            "album" : album,
            "year" : year,
            "length" : sum(map(len,preprocessed_lyrics)),
            "image_url" : url,
            "description" : description
        }
        for line in preprocessed_lyrics_metadata:
            # Update line metadata
            line_id = self.current_line_id
            line_id = str(line_id)
            self.line_metadata[line_id] = {
                "song_id" : song_id,
                "length" : len(line),
                "text" : " ".join([token for token, pos in line])
            }
            # Update the index
            for term,pos in line:
                term = str(term)
                if term not in self.index:
                    self.index[term] = {}
                    self.index[term]['song_df'] = 0
                    self.index[term]['line_df'] = 0
                if song_id not in self.index[term]:
                    self.index[term][song_id] = {}
                    self.index[term][song_id]['tf'] = 0
                    self.index[term]['song_df'] += 1
                    
                if  line_id not in self.index[term][song_id]:
                    self.index[term][song_id][line_id] = []
                    self.index[term]['line_df'] += 1

                 
                self.index[term][song_id]['tf'] += 1 
                self.index[term][song_id][line_id].append(pos)
            # Increment the line id
            self.current_line_id += 1

    def indexFile(self):
        cols = zip(*[self.lyrics[i] for i in self.lyrics.columns])
        song_no = 0
        for song in cols:
            self.processSong(*song)
            break
        self.pickle(f"phatboi")

parser = argparse.ArgumentParser(description='Convert CSV files to term positional inverted index.')
parser.add_argument('--file', type=str, required=True, help='File path to CSV file for parsing')
args = parser.parse_args()
indexer = Indexer(args.file)
indexer.indexFile()
